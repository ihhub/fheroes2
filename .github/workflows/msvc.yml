name: MSVC

on:
  workflow_call:

permissions:
  contents: write

jobs:
  msvc:
    strategy:
      matrix:
        include:
        - name: SDL2 x86
          platform: x86
          build_config: Release-SDL2
          deploy_config: SDL2
          installer_package_name: fheroes2_windows_x86_SDL2_installer.exe
          zip_package_name: fheroes2_windows_x86_SDL2.zip
          tools_package_name: fheroes2_tools_windows_x86_SDL2.zip
          release_name: Windows x86 build with SDL2 (latest commit)
          release_tag: fheroes2-windows-x86-SDL2
        - name: SDL2 x64
          platform: x64
          build_config: Release-SDL2
          deploy_config: SDL2
          installer_package_name: fheroes2_windows_x64_SDL2_installer.exe
          zip_package_name: fheroes2_windows_x64_SDL2.zip
          tools_package_name: fheroes2_tools_windows_x64_SDL2.zip
          release_name: Windows x64 build with SDL2 (latest commit)
          release_tag: fheroes2-windows-x64-SDL2
    name: MSVC (${{ matrix.name }})
    runs-on: windows-2019
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        script/windows/install_packages.bat
    - name: Install MSYS2 tools
      run: |
        C:\msys64\usr\bin\pacman.exe -S --noconfirm --noprogressbar gettext-devel
      shell: cmd
    - name: Download MSVC Redistributable package
      run: |
        mkdir .vcredist && ^
        C:\msys64\usr\bin\wget.exe -O .vcredist/vcredist.exe "%VCREDIST_URL%"
      shell: cmd
      env:
        # Permalink URL from https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170
        VCREDIST_URL: https://aka.ms/vs/17/release/vc_redist.${{ matrix.platform }}.exe
    - name: Verify MSVC Redistributable package
      run: |
        "%SIGNTOOL_DIR%\signtool.exe" verify /v /d /all /pa /r "Microsoft Root Certificate Authority" .vcredist\vcredist.exe
      shell: cmd
      env:
        SIGNTOOL_DIR: C:\Program Files (x86)\Windows Kits\10\bin\x64
    - name: Generate version information
      run: |
        echo "FHEROES2_APP_VERSION=$(cat version.txt)" >> "$GITHUB_ENV"
    - uses: microsoft/setup-msbuild@v2
    - name: Build
      run: |
        MSBuild.exe fheroes2-vs2019.vcxproj /property:Platform=${{ matrix.platform }} /property:Configuration=${{ matrix.build_config }}
    - name: Build tools
      run: |
        cd src/tools
        MSBuild.exe 82m2wav-vs2019.vcxproj /property:Platform=${{ matrix.platform }} /property:Configuration=${{ matrix.build_config }}
        MSBuild.exe bin2txt-vs2019.vcxproj /property:Platform=${{ matrix.platform }} /property:Configuration=${{ matrix.build_config }}
        MSBuild.exe extractor-vs2019.vcxproj /property:Platform=${{ matrix.platform }} /property:Configuration=${{ matrix.build_config }}
        MSBuild.exe h2dmgr-vs2019.vcxproj /property:Platform=${{ matrix.platform }} /property:Configuration=${{ matrix.build_config }}
        MSBuild.exe icn2img-vs2019.vcxproj /property:Platform=${{ matrix.platform }} /property:Configuration=${{ matrix.build_config }}
        MSBuild.exe pal2img-vs2019.vcxproj /property:Platform=${{ matrix.platform }} /property:Configuration=${{ matrix.build_config }}
        MSBuild.exe til2img-vs2019.vcxproj /property:Platform=${{ matrix.platform }} /property:Configuration=${{ matrix.build_config }}
        MSBuild.exe xmi2midi-vs2019.vcxproj /property:Platform=${{ matrix.platform }} /property:Configuration=${{ matrix.build_config }}
    - name: Generate translations
      run: |
        set PATH=C:\msys64\usr\bin;%PATH%
        C:\msys64\usr\bin\make.exe -C files/lang -j 2
      shell: cmd
    - name: Create Inno Setup package
      run: |
        iscc.exe script\windows\fheroes2.iss /DAppVersion="%FHEROES2_APP_VERSION%" /DBuildDir="..\..\%BUILD_DIR%" ^
                 /DPlatform=${{ matrix.platform }} /DDeployConfName=${{ matrix.deploy_config }}
      shell: cmd
      env:
        BUILD_DIR: build\${{ matrix.platform }}\${{ matrix.build_config }}
    - name: Create ZIP packages
      run: |
        7z.exe a -bb1 -tzip -- "$BUILD_DIR"\\${{ matrix.zip_package_name }} \
                               .\\"$BUILD_DIR"\\fheroes2.exe \
                               .\\"$BUILD_DIR"\\*.dll \
                               LICENSE \
                               changelog.txt \
                               .\\docs\\README.txt \
                               files\\data\\*.h2d \
                               files\\lang\\*.mo \
                               files\\timidity\\* \
                               maps\\*.fh2m \
                               .\\script\\demo\\*.bat \
                               .\\script\\demo\\*.ps1 \
                               .\\script\\homm2\\*.bat \
                               .\\script\\homm2\\*.ps1 
        7z.exe a -bb1 -tzip -- "$BUILD_DIR"\\${{ matrix.tools_package_name }} \
                               .\\"$BUILD_DIR"\\82m2wav.exe \
                               .\\"$BUILD_DIR"\\bin2txt.exe \
                               .\\"$BUILD_DIR"\\extractor.exe \
                               .\\"$BUILD_DIR"\\h2dmgr.exe \
                               .\\"$BUILD_DIR"\\icn2img.exe \
                               .\\"$BUILD_DIR"\\pal2img.exe \
                               .\\"$BUILD_DIR"\\til2img.exe \
                               .\\"$BUILD_DIR"\\xmi2midi.exe \
                               .\\"$BUILD_DIR"\\zlib1.dll \
                               LICENSE \
                               .\\docs\\GRAPHICAL_ASSETS.md \
                               .\\script\\agg\\extract_agg.bat
        if [[ ${{ matrix.deploy_config }} == SDL2 ]]; then
            7z.exe a -bb1 -tzip -- "$BUILD_DIR"\\${{ matrix.tools_package_name }} \
                                   .\\"$BUILD_DIR"\\SDL2.dll \
                                   .\\"$BUILD_DIR"\\SDL2_image.dll
        else
            false
        fi
      env:
        BUILD_DIR: build\${{ matrix.platform }}\${{ matrix.build_config }}
    - uses: actions/upload-artifact@v4
      if: ${{ github.event_name == 'pull_request' }}
      with:
        name: ${{ matrix.installer_package_name }}
        path: build/${{ matrix.platform }}/${{ matrix.build_config }}/${{ matrix.installer_package_name }}
        if-no-files-found: error
    - uses: actions/upload-artifact@v4
      if: ${{ github.event_name == 'pull_request' }}
      with:
        name: ${{ matrix.zip_package_name }}
        path: build/${{ matrix.platform }}/${{ matrix.build_config }}/${{ matrix.zip_package_name }}
        if-no-files-found: error
    - uses: actions/upload-artifact@v4
      if: ${{ github.event_name == 'pull_request' }}
      with:
        name: ${{ matrix.tools_package_name }}
        path: build/${{ matrix.platform }}/${{ matrix.build_config }}/${{ matrix.tools_package_name }}
        if-no-files-found: error
    - uses: ncipollo/release-action@v1
      if: ${{ github.event_name == 'push' }}
      with:
        artifacts: build/${{ matrix.platform }}/${{ matrix.build_config }}/${{ matrix.installer_package_name }},
                   build/${{ matrix.platform }}/${{ matrix.build_config }}/${{ matrix.zip_package_name }},
                   build/${{ matrix.platform }}/${{ matrix.build_config }}/${{ matrix.tools_package_name }}
        body: ${{ github.event.head_commit.message }}
        token: ${{ secrets.GITHUB_TOKEN }}
        name: ${{ matrix.release_name }}
        tag: ${{ matrix.release_tag }}
        allowUpdates: true
        artifactErrorsFailBuild: true
        prerelease: true
        replacesArtifacts: true

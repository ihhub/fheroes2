name: Translation update

on:
  workflow_call:

jobs:
  check:
    name: Translation update
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ github.repository == 'ihhub/fheroes2' && ( github.event_name == 'push' || ( github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository ) ) }}
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get -y update
        sudo apt-get -y install gettext
    - name: Setup Git
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "action@github.com"
    - name: Create PR branch
      run: |
        PR_BRANCH="translation-update-$(uuidgen)"
        git switch -c "$PR_BRANCH"
        echo "PR_BRANCH=$PR_BRANCH" >> "$GITHUB_ENV"
    - name: Generate POT
      run: |
        make -C src/dist -j 2 pot
    - name: Merge PO with POT
      run: |
        make -C files/lang -j 2 merge
    - name: Commit changes
      run: |
        set -o pipefail
        git diff --name-only -z -- files/lang/*.po \
        | xargs -r0 bash -c 'set -e; for NAME in "$@"; do if [[ "$(git diff "-I^\"POT-Creation-Date:[^\"]*\"$" -- "$NAME")" != "" ]]; then git add -- "$NAME"; fi; done' dummy
        if git commit -m "Update translation files"; then git push origin HEAD; echo "CREATE_PR=YES" >> "$GITHUB_ENV"; fi
    - name: Create PR
      if: ${{ env.CREATE_PR == 'YES' }}
      uses: actions/github-script@v6
      with:
        script: |
          let pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Update translation files",
              head: "${{ env.PR_BRANCH }}",
              base: "${{ github.ref }}",
          });
          let assigneesPromise = github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.data.number,
              assignees: ["${{ github.actor }}"],
          });
          let labelsPromise = github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.data.number,
              labels: ["improvement", "translation"],
          });
          await Promise.all([assigneesPromise, labelsPromise]);
